using namespace std;

#include <iostream>
#include <string.h>
#include <string>
#define NOMINMAX
#define WIN32_LEAN_AND_MEAN
#include <Windows.h>


const int MAX_X_VIEV = 35; // 67 столбы
const int MAX_Y_VIEV = 100; // 237 строки
const int Fields = 3; // 3 * 3
const int MAX_X = MAX_X_VIEV * Fields;
const int MAX_Y = MAX_Y_VIEV * Fields;

HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);

void ShowConsoleCursor(bool showFlag) {
    HANDLE out = GetStdHandle(STD_OUTPUT_HANDLE);
    CONSOLE_CURSOR_INFO cursorInfo;
    GetConsoleCursorInfo(out, &cursorInfo);
    cursorInfo.bVisible = showFlag;
    SetConsoleCursorInfo(out, &cursorInfo);
}
void cls()
{
    // Get the Win32 handle representing standard output.
    // This generally only has to be done once, so we make it static.
    static const HANDLE hOut = GetStdHandle(STD_OUTPUT_HANDLE);

    CONSOLE_SCREEN_BUFFER_INFO csbi;
    COORD topLeft = { 0, 0 };

    // std::cout uses a buffer to batch writes to the underlying console.
    // We need to flush that to the console because we're circumventing
    // std::cout entirely; after we clear the console, we don't want
    // stale buffered text to randomly be written out.
    std::cout.flush();

    // Figure out the current width and height of the console window
    if (!GetConsoleScreenBufferInfo(hOut, &csbi)) {
        // TODO: Handle failure!
        abort();
    }
    DWORD length = csbi.dwSize.X * csbi.dwSize.Y;

    DWORD written;

    // Flood-fill the console with spaces to clear it
    FillConsoleOutputCharacter(hOut, TEXT(' '), length, topLeft, &written);

    // Reset the attributes of every character to the default.
    // This clears all background colour formatting, if any.
    FillConsoleOutputAttribute(hOut, csbi.wAttributes, length, topLeft, &written);

    // Move the cursor back to the top left for the next sequence of writes
    SetConsoleCursorPosition(hOut, topLeft);
}

// x is the column, y is the row. The origin (0,0) is top-left.
void setCursorPosition(int x, int y)
{
    static const HANDLE hOut = GetStdHandle(STD_OUTPUT_HANDLE);
    std::cout.flush();
    COORD coord = { (SHORT)x, (SHORT)y };
    SetConsoleCursorPosition(hOut, coord);
}

void player_movement(int& posX, int& posY) {
    if (GetKeyState('W') & 0x8000)
    {
        posX--;
    }
    if (GetKeyState('S') & 0x8000)
    {
        posX++;
    }

    if (GetKeyState('A') & 0x8000)
    {
        posY--;
    }
    if (GetKeyState('D') & 0x8000)
    {
        posY++;
    }
}
bool ChangeMap(int& posX, int& posY, int& Viev_X, int& Viev_Y) {
    bool change = false;
    if (posX < 0 && Viev_X > 0) { // вверх //
        posX = MAX_X_VIEV-1;
        Viev_X -= MAX_X_VIEV;
        change = true;
    }
    else if (posX < 0)
    {
        posX = 0;
    }

    if (posX >= MAX_X_VIEV && Viev_X + MAX_X_VIEV < MAX_X) { // вниз //
        posX = 0;
        Viev_X += MAX_X_VIEV;
        change = true;
    }
    else if (posX >= MAX_X_VIEV)
    {
        posX = MAX_X_VIEV-1;
    }

    if (posY >= MAX_Y_VIEV-1 && Viev_Y + MAX_Y_VIEV < MAX_Y) { // направо
        posY = 0;
        Viev_Y += MAX_Y_VIEV;
        change = true;
    }
    else if (posY >= MAX_Y_VIEV-1)
    {
        posY = MAX_Y_VIEV - 2;
    }

    if (posY < 0 && Viev_Y > 0) { // наЛЕВО
        posY = MAX_Y_VIEV-2;
        Viev_Y -= MAX_Y_VIEV;
        change = true;
    }
    else if (posY < 0)
    {
        posY = 0;
    }
    return change;
}

int main()
{
    SetConsoleTextAttribute(hConsole, 8);
    //ShowConsoleCursor(false);
    ::SendMessage(::GetConsoleWindow(), WM_SYSKEYDOWN, VK_RETURN, 0x20000000);
    setlocale(0, "");
    // srand(time(NULL));

    const int TERR_SIZE = 11;
    const int TERR_MAX_SIZE = 200;
    char terr[TERR_MAX_SIZE] = { '`',',','"','_','.', '-', 'o', '*', '/', ';','#'};
    for (int i = TERR_SIZE; i < TERR_MAX_SIZE; i++) {
        terr[i] = ' ';
    }

    int Viev_X = 0;
    int Viev_Y = 0;

    char map[MAX_Y][MAX_X];
    for (int y = 0; y < MAX_Y; y++)
    {
        for (int x = 0; x < MAX_X; x++)
        {
            //BattleField[y][x] = '.';
            map[y][x] = terr[rand() % TERR_MAX_SIZE];
        }
    }

    for (int x = 0; x < MAX_X; x++) { //по бокам
        map[0][x] = '#';
        map[MAX_Y - 1][x] = '#';
    }
    for (int y = 0; y < MAX_Y; y++) {
        map[y][0] = '#';
        map[y][MAX_X - 1] = '#';
    }
    /*
    for (int x = 0; x < MAX_X; x++)
    {
        for (int y = 0; y < MAX_Y; y++)
        {
            cout << map[y][x];
            
        }
        cout << endl;
    }

    cls();*/

    char BattleField[MAX_Y_VIEV][MAX_X_VIEV];
    char prevBattleField[MAX_Y_VIEV][MAX_X_VIEV];

    for (int y = 0; y < MAX_Y_VIEV; y++)
    {
        for (int x = 0; x < MAX_X_VIEV ; x++)
        {
            BattleField[y][x] = map[y][x];
        }
    }

    int P_X = 5; // position of player [X]
    int P_Y = 5; // position of player [Y]

    int eat_X = 0;
    int eat_Y = 0;

    /*
    BattleField[eat_X][eat_Y] = 'O';
     eat_X++;
     if (eat_X >= MAX_X_VIEV) {
      eat_Y++;
      eat_X = 0;
      if (eat_Y >= MAX_Y_VIEV) {
       break;
      }
     }

    if(times % 1 == 0) {
      BattleField[rand() % MAX_Y_VIEV][rand() % MAX_X_VIEV] = '*';
     }
    */

    int times = 0;
    ShowConsoleCursor(FALSE);

    /*
    for (int k = 1; k < 255; k++)
    {
     // pick the colorattribute k you want
     SetConsoleTextAttribute(hConsole, k);
     cout << k << " I want to be nice today!" << endl;
    }*/
   

    Sleep(1000);
    
    while (true) {

        for (int y = 0; y < MAX_Y_VIEV; y++)
        {
            for (int x = 0; x < MAX_X_VIEV; x++)
            {
                if (BattleField[y][x] == prevBattleField[y][x]) {
                    continue;
                }
                if (BattleField[y][x] == '#') {
                    SetConsoleTextAttribute(hConsole, 4);
                    setCursorPosition(y, x);
                    std::cout << BattleField[y][x];
                    SetConsoleTextAttribute(hConsole, 8);
                    continue;
                }

                setCursorPosition(y, x);
                std::cout << BattleField[y][x];
            }
        }
       // copy(&BattleField[0][0], &BattleField[0][0], &prevBattleField[0][0]);
        //std::cout.flush();

        std::memcpy((char*)prevBattleField, (char const*)BattleField, MAX_X_VIEV * MAX_Y_VIEV);

        int prevX = P_X;
        int prevY = P_Y;

        player_movement(P_X, P_Y);
        
        if (map[prevY + Viev_Y][P_X + Viev_X] == '#' || map[prevY + Viev_Y + 1][P_X + Viev_X] == '#') {
            P_X = prevX;
        }
        if ((map[P_Y + Viev_Y][prevX + Viev_X] == '#') || (map[P_Y + Viev_Y + 1][prevX + Viev_X] == '#')) {
            P_Y = prevY;
        }
        if ((map[P_Y + Viev_Y][P_X + Viev_X] == '#') || (map[P_Y + Viev_Y + 1][P_X + Viev_X] == '#')) {
            P_Y = prevY;
            P_X = prevX;
        }
        if (P_X != prevX || P_Y != prevY) {
            bool result = ChangeMap(P_X, P_Y, Viev_X, Viev_Y);
            
            if (result == true) {
                for (int y = Viev_Y; y < Viev_Y + MAX_Y_VIEV; y++)
                {
                    for (int x = Viev_X; x < Viev_X + MAX_X_VIEV; x++)
                    {
                        BattleField[y - Viev_Y][x - Viev_X] = map[y][x];
                    }
                }

                SetConsoleTextAttribute(hConsole, 8);
                setCursorPosition(prevY, prevX);
                std::cout << BattleField[prevY][prevX];
                setCursorPosition(prevY + 1, prevX);
                std::cout << BattleField[prevY + 1][prevX];
            }
        }

        setCursorPosition(P_Y, P_X);
        SetConsoleTextAttribute(hConsole, 204); //12 or 204
        std::cout << " ";
        setCursorPosition(P_Y + 1, P_X);
        SetConsoleTextAttribute(hConsole, 204); //12 or 204
        std::cout << " ";

        Sleep(25);

        SetConsoleTextAttribute(hConsole, 8);

        if (prevX != P_X) {
            setCursorPosition(prevY, prevX);
            std::cout << BattleField[prevY][prevX];
            setCursorPosition(prevY + 1, prevX);
            std::cout << BattleField[prevY + 1][prevX];
        }
        else if (prevY > P_Y) {
            setCursorPosition(prevY + 1, prevX);
            std::cout << BattleField[prevY + 1][prevX];
        }
        else if (prevY < P_Y) {
            setCursorPosition(prevY, prevX);
            std::cout << BattleField[prevY][prevX];
        }

    }

    return 0;
}